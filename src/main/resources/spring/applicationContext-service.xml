<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!--扫描service包-->
    <context:component-scan base-package="com.fy.service"/>
    <!--不加入import dataSource 就会报错-->
    <!--<import resource="applicationContext-dao.xml"/>-->

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启事务行为 事务采用全注解方式 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置事务管理的通知(具体指定aop拦截到的哪些方法需要创建/使用事务 -->
    <!--<tx:advice id="defaultTransactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash;<tx:method name="*" isolation="DEFAULT"&ndash;&gt;
            &lt;!&ndash;propagation="REQUIRED" no-rollback-for="java.lang.RuntimeException" timeout="100"/>&ndash;&gt;
            &lt;!&ndash;<tx:method name="*" read-only="true"/>&ndash;&gt;
            &lt;!&ndash; 以方法为单位,指定方法应用什么事务属性 isolation:隔离级别 propagation:传播行为 read-only:是否只读 &ndash;&gt;
            &lt;!&ndash;PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。&ndash;&gt;
            &lt;!&ndash;PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。&ndash;&gt;
            &lt;!&ndash;PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。&ndash;&gt;
            &lt;!&ndash;PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。&ndash;&gt;
            &lt;!&ndash;PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。&ndash;&gt;
            &lt;!&ndash;PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。&ndash;&gt;
            &lt;!&ndash;PROPAGATION_NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。&ndash;&gt;

            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="Borrow*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="put*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="use*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>-->
    <!-- 切面编程配置，根据自身业务配置，若无相关拦截需求可不配置 -->
    <!--<aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com..service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice" />
    </aop:config>-->
</beans>